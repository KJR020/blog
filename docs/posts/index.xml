<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on KJR020&#39;s Blog</title>
    <link>https://kjr020.github.io/posts/</link>
    <description>Recent content in Posts on KJR020&#39;s Blog</description>
    <generator>Hugo -- 0.134.0</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 30 Sep 2024 07:09:08 +0900</lastBuildDate>
    <atom:link href="https://kjr020.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue3 Tutorial 11-12 ChildComponent &amp; Props</title>
      <link>https://kjr020.github.io/posts/vue/vue3tutorial11-12/</link>
      <pubDate>Mon, 30 Sep 2024 07:09:08 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/vue/vue3tutorial11-12/</guid>
      <description>&lt;h2 id=&#34;おさらい&#34;&gt;おさらい&lt;/h2&gt;
&lt;p&gt;Vue3のチュートリアルを進めています。
前回は、VueのComponentの&lt;code&gt;watch&lt;/code&gt;について学習しました。
Reactでいう&lt;code&gt;useEffect&lt;/code&gt;のようなもので、
リアクティブな値の変化を監視して、副作用を伴う関数を実行することができる機能です。&lt;/p&gt;
&lt;p&gt;前回の記事はこちら](/posts/vue/vue3tutorial10/)&lt;/p&gt;
&lt;h2 id=&#34;child-component&#34;&gt;Child component&lt;/h2&gt;
&lt;p&gt;今回は最終回で、チュートリアル11-12までまとめて学習します。
ChildComponentと&lt;code&gt;Props&lt;/code&gt;について学習します。
チュートリアルのリンクは以下です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.vuejs.org/tutorial/#step-11&#34;&gt;ChildComponent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.vuejs.org/tutorial/#step-12&#34;&gt;Props&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step11-child-component&#34;&gt;Step11 Child Component&lt;/h3&gt;
&lt;p&gt;Vueでは、コンポーネントの再利用するための仕組みが用意されています。
それが、Child Componentです。
子コンポーネントを作成して、親コンポーネントで使用することができます。&lt;/p&gt;
&lt;p&gt;実際のチュートリアルのコードを見てみます
Composition APIとSFC(Single File Component)を前提としています。&lt;/p&gt;
&lt;h4 id=&#34;child-componentの作成&#34;&gt;Child Componentの作成&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ChildComp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;vue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Vue3 Tutorial Step10 Watcher</title>
      <link>https://kjr020.github.io/posts/vue/vue3tutorial10/</link>
      <pubDate>Sun, 29 Sep 2024 14:56:37 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/vue/vue3tutorial10/</guid>
      <description>&lt;h2 id=&#34;vue3-tutorial-step10-watcher&#34;&gt;Vue3 Tutorial Step10 Watcher&lt;/h2&gt;
&lt;p&gt;watcherについて学習した内容です。&lt;/p&gt;
&lt;p&gt;余談ですが、今回から文体を変えてみました。&lt;br&gt;
理由としては、口頭での説明力を鍛えるためです。&lt;br&gt;
「人に説明している場面を想像して文章を書く」という方法を取り入れてみました。&lt;/p&gt;
&lt;h3 id=&#34;watcher-について&#34;&gt;Watcher について&lt;/h3&gt;
&lt;p&gt;Watcherについての概要です。
Tutorialの内容を自分が咀嚼した、まとめたものです。
私の解釈がふくまれているため、正確な情報は公式ドキュメントを参照してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;watcherはVueのリアクティブシステムの中心的な機能のひとつ&lt;/li&gt;
&lt;li&gt;リアクティブな値の変化を監視して、副作用を伴う関数を実行することができる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watch&lt;/code&gt;メソッドでは、監視するリアクティブな値(&lt;code&gt;ref&lt;/code&gt;メソッドを使って定義した変数)と、値が変化した時に実行されるコールバック関数を設定する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;チュートリアルでは、
その一例としてwatchを使用して監視対象が変更した際に、APIからデータを取得する例を示しています。&lt;/p&gt;
&lt;p&gt;大まかな流れは以下の通りです。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;button要素がクリックされると、リアクティブな&lt;code&gt;todoId&lt;/code&gt;の値がインクリメントされる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;todoId&lt;/code&gt;の値が変化した時に、&lt;code&gt;fetchData&lt;/code&gt;関数が実行される&lt;/li&gt;
&lt;li&gt;&lt;code&gt;todoId&lt;/code&gt;はボタンのclickイベントでインクリメントされ、&lt;code&gt;fetchData&lt;/code&gt;関数がトリガーされる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetchData&lt;/code&gt;関数内でREST APIのエンドポイントに対してgetリクエストを送信&lt;/li&gt;
&lt;li&gt;&lt;code&gt;todoId&lt;/code&gt;に対応するデータを取得して、&lt;code&gt;todoData&lt;/code&gt;に格納する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;todoData&lt;/code&gt;の変化を監視して、&lt;code&gt;todoData&lt;/code&gt;が変化した時に、&lt;code&gt;todoData&lt;/code&gt;を表示する&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;チュートリアルのコードを引用します。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;watch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoId&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetchData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fetch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;sb&#34;&gt;`https://jsonplaceholder.typicode.com/todos/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;todoData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;fetchData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todoId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fetchData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Todo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todoId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;@click&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;=&amp;#34;todoId++&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;:disabled&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;!todoData&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fetch&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;button&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;v-if&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;todoData&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Loading...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;v-else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;todoData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pre&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Vue3 Tutorial Step9 ライフサイクルとテンプレート参照</title>
      <link>https://kjr020.github.io/posts/vue/vue3tutorial9/</link>
      <pubDate>Fri, 27 Sep 2024 07:43:52 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/vue/vue3tutorial9/</guid>
      <description>&lt;h2 id=&#34;ライフサイクルとテンプレート参照&#34;&gt;ライフサイクルとテンプレート参照&lt;/h2&gt;
&lt;p&gt;今回のチュートリアルでは、ライフサイクルフックとテンプレート参照について学習した。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.vuejs.org/tutorial/#step-9&#34;&gt;https://ja.vuejs.org/tutorial/#step-9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;onMounted&lt;/code&gt;を例にライフサイクルフックを学習。&lt;/p&gt;
&lt;h3 id=&#34;ライフサイクルフック&#34;&gt;ライフサイクルフック&lt;/h3&gt;
&lt;p&gt;ライフサイクルフックは、コンポーネントのライフサイクル（生成から削除されるまで）のイベントに応じて、コールバック関数を設定して処理を実行する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;onMounted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;vue&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pElementRef&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;onMounted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;pElementRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mounted!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;pElementRef&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Vue3 Tutorial8 算出プロパティ</title>
      <link>https://kjr020.github.io/posts/vue/vue3tutorial8/</link>
      <pubDate>Thu, 26 Sep 2024 07:02:19 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/vue/vue3tutorial8/</guid>
      <description>&lt;h2 id=&#34;vue3の復習-tutorial-step8&#34;&gt;Vue3の復習 tutorial-step8&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ja.vuejs.org/tutorial/#step-8&#34;&gt;https://ja.vuejs.org/tutorial/#step-8&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vue.js
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Computed Property&lt;/code&gt; 算出プロパティ&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メソッドの戻り値をキャッシュして、依存する値が変わったときに再計算される&lt;/li&gt;
&lt;li&gt;Reactでいうところの&lt;code&gt;useMemo&lt;/code&gt;のようなもの&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;newTodo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;hideCompleted&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Learn HTML&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Learn JavaScript&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Learn Vue&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;computed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;filteredTodos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hideCompleted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;addTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;newTodo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;removeTodo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;todos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;todo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Vue3の復習 tutorial-step4-7</title>
      <link>https://kjr020.github.io/posts/vue/vue3tutorial4-7/</link>
      <pubDate>Mon, 23 Sep 2024 06:15:58 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/vue/vue3tutorial4-7/</guid>
      <description>&lt;p&gt;今度の案件でVue3を使うことになった
たしか１年ほど前に少しだけ触ったことがあるが、案件に備えてチュートリアルで復習する&lt;/p&gt;
&lt;h2 id=&#34;イベントリスナー-v-on&#34;&gt;イベントリスナー &lt;code&gt;v-on&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.vuejs.org/tutorial/#step-4&#34;&gt;https://ja.vuejs.org/tutorial/#step-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-on&lt;/code&gt;ディレクティブを使って、イベントリスナーを追加できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-on&lt;/code&gt;は&lt;code&gt;@&lt;/code&gt;で省略できる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;フォームバインディング&#34;&gt;フォームバインディング&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.vuejs.org/tutorial/#step-5&#34;&gt;https://ja.vuejs.org/tutorial/#step-5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-on&lt;/code&gt;,&lt;code&gt;v-model&lt;/code&gt;を使うと双方向のデータバインディングができる&lt;/li&gt;
&lt;li&gt;いまさら気づいたが、&lt;code&gt;data&lt;/code&gt;は関数を返す必要があるらしい
&lt;ul&gt;
&lt;li&gt;objectでもよいのでは？と思ったが、&lt;code&gt;data&lt;/code&gt;はコンポーネントのインスタンスごとに異なるデータを持つため、関数を返す必要がある&lt;/li&gt;
&lt;li&gt;objectを返すと、コンポーネントのインスタンスが共有されてしまう&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;逆に、&lt;code&gt;methods&lt;/code&gt;はobjectを返す必要がある
&lt;ul&gt;
&lt;li&gt;これは、コンポーネントのインスタンスが共有されても問題ないためか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vue&#34; data-lang=&#34;vue&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;onInput&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;@input&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;=&amp;#34;onInput&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Svelte Reactivity Tutorial Notes</title>
      <link>https://kjr020.github.io/posts/sveltereactivity/</link>
      <pubDate>Sun, 22 Sep 2024 05:39:36 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/sveltereactivity/</guid>
      <description>&lt;p&gt;Svelteの学習メモ。
&lt;a href=&#34;https://learn.svelte.jp/tutorial/updating-arrays-and-objects&#34;&gt;https://learn.svelte.jp/tutorial/updating-arrays-and-objects&lt;/a&gt;の内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Svelteのリアクティビティ
&lt;ul&gt;
&lt;li&gt;Svelteではリアティビティは代入によってトリガーされる
-&lt;code&gt;push&lt;/code&gt;や&lt;code&gt;pop&lt;/code&gt;などのメソッドを使うと、配列の内容が変更されたことをSvelteが検知できない
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;これらのメソッドを使う場合は、配列を再代入する必要がある&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;値を再代入する&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;スプレッド演算子を使う&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>DbCについて調べた</title>
      <link>https://kjr020.github.io/posts/dbc%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%81%9F/</link>
      <pubDate>Thu, 19 Sep 2024 20:32:22 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/dbc%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%81%9F/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;DbC(Design by Contract)というプログラミング設計手法について、達人プログラマーを読んでいて知った。
あらかじめ決めた契約を満たすようにプログラムを設計する手法らしい。&lt;/p&gt;
&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;定義を調べておこう
Wikipediaを見てみると、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;契約プログラミング（けいやくプログラミング、英: Contract programming）または契約による設計（けいやくによるせっけい、英: Design by Contract; DbC）は、ソフトウェアの正確性と頑健性を高めるためのソフトウェア設計の方法論である&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;DbCにおける契約は、&lt;br&gt;
クラスのインスタンスとそのメソッドの利用に関する取り決めを明示するものらしい&lt;br&gt;
ここでいう契約は、クライアントとサプライヤの間の契約として考えることができるようだ&lt;/p&gt;
&lt;p&gt;以下の３つの契約で構成される&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前提条件&lt;/strong&gt;&lt;br&gt;
クラスのメソッドが呼び出される前に満たされているべき条件
メソッドの利用者が果たすべき責任として考える事ができる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;事後条件&lt;/strong&gt;&lt;br&gt;
メソッドが終了した時点で保証される条件
これは、利用者がメソッドを呼び出した後にどういう状態になるかを示す。
契約になぞらえると、サプライヤが果たすべき責任として考える事ができる&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;クラス不変条件&lt;/strong&gt;
クラスがインスタンス化された時点から破壊されることのない条件
この条件は、クラスのインスタンスが生成された時点から破壊されることのない条件を示す
クラアントとサプライヤ双方の責任として考える事ができる&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;DbCについて調べてみた
文章を書く練習も兼ねて、30分で記事を書こうと思ったが時間が足りなかった&lt;br&gt;
さわりのみになってしまったので、もう少し時間をかけて調べてみたい&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Design_by_contract&#34;&gt;https://en.wikipedia.org/wiki/Design_by_contract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%A5%91%E7%B4%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0&#34;&gt;https://ja.wikipedia.org/wiki/契約プログラミング&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Pythonの組み込み関数superについて</title>
      <link>https://kjr020.github.io/posts/python%E3%81%AE%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E9%96%A2%E6%95%B0super%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Tue, 03 Sep 2024 21:51:30 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/python%E3%81%AE%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E9%96%A2%E6%95%B0super%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>&lt;p&gt;Python組み込み関数のsuperについて調べたことをまとめる&lt;/p&gt;
&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;super()について、ライブラリの実装を読んでいると時々目にしていたが、&lt;br&gt;
自分では使ったことがなかったので、中身の処理をよく理解していなかった。
DjangoのCreateViewの実装を理解したいと思い、その一環でsuper()について調べてみることにした。&lt;/p&gt;
&lt;h2 id=&#34;調べてみる&#34;&gt;調べてみる&lt;/h2&gt;
&lt;p&gt;まずは公式ドキュメントを読んでみる&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;class super(type, object_or_type=None)&lt;br&gt;
メソッドの呼び出しを type の親または兄弟クラスに委譲するプロキシオブジェクトを返します。&lt;br&gt;
これはクラスの中でオーバーライドされた継承メソッドにアクセスするのに便利です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;proxyオブジェクトを渡すらしいが、まだ良くわかってない
super().get()とかsuper().post()とか具体的に動かしてみるとする&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;親クラスの挨拶メソッド&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello from Parent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;子クラスの挨拶メソッド&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello from Child&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 親クラスのメソッドを呼び出す&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# インスタンスの生成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;parent_instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;child_instance&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 挨拶を表示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;child_instance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;greet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>ValueObjectとは</title>
      <link>https://kjr020.github.io/posts/valueobject%E3%81%A8%E3%81%AF/</link>
      <pubDate>Thu, 29 Aug 2024 07:43:34 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/valueobject%E3%81%A8%E3%81%AF/</guid>
      <description>&lt;h3 id=&#34;経緯&#34;&gt;経緯&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/339/articles/e3c174fdcc083e&#34;&gt;https://zenn.dev/339/articles/e3c174fdcc083e&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;を読んでいて、バリューオブジェクトの理解が曖昧だなと思ったので再確認&lt;br&gt;
記事によると、基本的には、くまぎさんの書いたwikiの翻訳を信じたら良いらしい&lt;br&gt;
確かに、くまぎさんの書いたwikiなら信頼できそうだなと思った&lt;/p&gt;
&lt;h3 id=&#34;調べてみる&#34;&gt;調べてみる&lt;/h3&gt;
&lt;p&gt;リファレンスもみてみる&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;^ Fowler, Martin (2003年). “Value Object”. Catalog of Patterns of Enterprise Application Architecture. Martin Fowler (martinfowler.com). 2011年7月17日閲覧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一参考文献にある、Martin Fowler氏の説明を読む&lt;/p&gt;
&lt;p&gt;Martin Fowler氏のサイトによると、&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Value Object
A small simple object, like money or a date range, whose equality isn&amp;rsquo;t based on identity.&lt;/p&gt;
&lt;p&gt;With object systems of various kinds, I&amp;rsquo;ve found it useful to distinguish between reference objects and Value Objects. Of the two a Value Object is usually the smaller; it&amp;rsquo;s similar to the primitive types present in many languages that aren&amp;rsquo;t purely object-oriented.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CRLFについて</title>
      <link>https://kjr020.github.io/posts/crlf%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Sun, 25 Aug 2024 17:06:03 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/crlf%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;
&lt;p&gt;８月からWebエンジニアに転職し、業務でmacOSを使用することになった。&lt;br&gt;
学生時代ぶりのmacOSで、ターミナルの操作や環境構築に戸惑いを感じることが多い。
環境構築の際に、Windows環境で使用していた&lt;code&gt;.vimrc&lt;/code&gt;をmacで使用したが、
CRLFに由来するエラーに遭遇した。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$  kjr020.github.io git:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;main&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; ✗ vim
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/Users/hoge/.vimrc の処理中にエラーが検出されました:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;行    3:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;E492: エディタのコマンドではありません: ^M
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;行    6:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;E492: エディタのコマンドではありません: ^M
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;行    8:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;今までCRLFについては、WindowsとLinuxでの改行コードの違いとして認識していたが、
macOSでCRLFが問題になることがあることを知らなかった。&lt;br&gt;
この機会に調べてみることにした&lt;/p&gt;
&lt;h3 id=&#34;crlfとは&#34;&gt;CRLFとは&lt;/h3&gt;
&lt;p&gt;CRLFはCarriage Return Line Feedの略で、&lt;br&gt;
CR(Carriage Return)は復帰、(Line Feed)は改行のための制御文字である。
CRは行の先頭にカーソルを移動させる制御文字で、LFは次の行にカーソルを移動させる制御文字である。
macOS(unix系OS)では、LFのみを改行コードとして使用しているため、CRが処理されず問題になる&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cookieとは</title>
      <link>https://kjr020.github.io/posts/cookie%E3%81%A8%E3%81%AF/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/cookie%E3%81%A8%E3%81%AF/</guid>
      <description>&lt;h1 id=&#34;cookieについて&#34;&gt;Cookieについて&lt;/h1&gt;
&lt;p&gt;技術面接に関して、どのような事を聞かれるのか気になった&lt;br&gt;
Cookieについて、十分に理解してなかったと気づいた&lt;/p&gt;
&lt;p&gt;「サーバーとブラウザで通信したセッションに関する情報を記録し、
再度アクセスしたときに状態を復帰できるように、保存する仕組み」&lt;/p&gt;
&lt;p&gt;調べてみた。&lt;/p&gt;
&lt;h2 id=&#34;cookieとは&#34;&gt;Cookieとは？&lt;/h2&gt;
&lt;p&gt;理解はおおよそ合っている。
HTTP Cookieとも呼ばれるらしい。
ユーザーがウェブサイトにアクセスした時にブラウザに送られてくるテキストデータ。&lt;br&gt;
Edgeでは、下記のpathに存在する&lt;br&gt;
&lt;code&gt;C:\Users\&amp;lt;ユーザー名&amp;gt;\AppData\Local\Microsoft\Edge\User Data\Default\Cookies&lt;/code&gt;&lt;br&gt;
ユーザーがアクセスしたときの情報を保存しておいて、再度アクセスしたときに状態を復元できる&lt;/p&gt;
&lt;p&gt;セッションCookieとパーシステントCookieがあるらしい。&lt;br&gt;
セッションCookieは一時的なもので、ブラウザを閉じると削除される。&lt;br&gt;
パーシステントCookieは、有効期限が設定されていて、有効期限まではデバイスに残る。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zenn.dev/hidebon0630/articles/75022374e28cdf&#34;&gt;面接で聞かれた技術的質問🚀&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://policies.google.com/technologies/cookies?hl=ja&#34;&gt;Googleのポリシーと規約&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/microsoft-edge/devtools-guide-chromium/storage/cookies&#34;&gt;https://learn.microsoft.com/ja-jp/microsoft-edge/devtools-guide-chromium/storage/cookies&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>CORSに関するメモ</title>
      <link>https://kjr020.github.io/posts/cors%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%83%A1%E3%83%A2/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/cors%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%83%A1%E3%83%A2/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;Djangoの本番環境を構築しているとき、CORSの設定をしないと、CORSエラーが発生しコンテンツが読み込めないことがあった。
CORSとは、Cross-Origin Resource Sharingの略で、異なるオリジン間でのリソース共有を許可するための仕組みらしいが、
あまり理解していなかったので、調べてみた。&lt;/p&gt;
&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;CORS(Cross Origin Resource Sharing)は、異なるオリジン間で安全にリソース共有するための仕組みである。(XSSやCSRFなどのセキュリティ上のリスクがあるためである。)
通常ブラウザでは、異なるオリジン間でのリソース共有はセキュリティ上の理由から制限されている。SOP(Same Origin Policy)という制約がある。
主に、APIリクエストや非静的ファイルのリクエストに適用される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy&#34;&gt;https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;オリジンとは&#34;&gt;オリジンとは&lt;/h3&gt;
&lt;p&gt;そもそもオリジンについて、明確な定義を知らないと気付いた。
オリジンは、スキーマ、ホスト、ポートの組み合わせで識別される。
RFC6454に定義されている。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://www.example.com:8080
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記の例では、&lt;code&gt;https&lt;/code&gt;がスキーマ、&lt;code&gt;www.example.com&lt;/code&gt;がFQDN、&lt;code&gt;8080&lt;/code&gt;がポートである。&lt;/p&gt;
&lt;h3 id=&#34;sopsame-origin-policy&#34;&gt;SOP(Same Origin Policy)&lt;/h3&gt;
&lt;p&gt;SOPは、異なるオリジン間でのリソース共有を制限するための仕組みである。
異なるオリジン間でのリソース共有は、クロスサイトスクリプティング(XSS)やクロスサイトリクエストフォージェリ(CSRF)などのセキュリティ上のリスクがあるため、制限されている。
セキュリティ的に外部のオリジンが信用できる場合,CORSによって制限を解除することができる。&lt;/p&gt;
&lt;h2 id=&#34;cors-headerを付与すると何が起こるのか&#34;&gt;cors-headerを付与すると何が起こるのか&lt;/h2&gt;
&lt;p&gt;CORSヘッダーを付与すると、
リクエストの際にブラウザはCORSポリシーに従ってリクエストを送信する。
CORSポリシーは、リクエストを送信する際に、リクエストヘッダーに&lt;code&gt;Origin&lt;/code&gt;を付与する。
サーバーは、リクエストヘッダーの&lt;code&gt;Origin&lt;/code&gt;を見て、リクエストを許可するかどうかを判断する。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6454&#34;&gt;https://datatracker.ietf.org/doc/html/rfc6454&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/shun198/items/9ebf19d8fd2c412396dd&#34;&gt;https://qiita.com/shun198/items/9ebf19d8fd2c412396dd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://atmarkit.itmedia.co.jp/ait/articles/1311/26/news007.html&#34;&gt;https://atmarkit.itmedia.co.jp/ait/articles/1311/26/news007.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Djangoチュートリアルその1</title>
      <link>https://kjr020.github.io/posts/django%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%81%9D%E3%81%AE1/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/django%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E3%81%9D%E3%81%AE1/</guid>
      <description>&lt;p&gt;チュートリアルでは、簡単な(Poll)アプリケーションの作成に取り組む。
Pollアプリケーションでは、２つのサイトからなる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ユーザーが投票と投票結果の確認ができる公開用サイト&lt;/li&gt;
&lt;li&gt;投票項目の追加や変更、削除ができる管理(admin)サイト&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;プロジェクトを作成する&#34;&gt;プロジェクトを作成する&lt;/h2&gt;
&lt;p&gt;下記コマンドを実行することで、projectのコードを自動生成できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;django-admin startproject mysite
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;開発用サーバー&#34;&gt;開発用サーバー&lt;/h2&gt;
&lt;h2 id=&#34;polls-アプリケーションをつくる&#34;&gt;Polls アプリケーションをつくる&lt;/h2&gt;
&lt;h2 id=&#34;はじめてのビュー作成&#34;&gt;はじめてのビュー作成&lt;/h2&gt;
&lt;h3 id=&#34;path関数&#34;&gt;path関数&lt;/h3&gt;
&lt;p&gt;include関数は、URLconfへの参照が可能。include()に遭遇すると、
そのポイントまでに一致したURLの部分を切り落とし、次の処理のために残りの文字列をインクルードされたURLconfへ渡す
背景にある考えは、URLをプラグ&amp;amp;プレイ可能にすることらしい
pollsは独自のURLconfを持っている&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4つの引数を取る。&lt;code&gt;route&lt;/code&gt;と&lt;code&gt;view&lt;/code&gt;は必須。&lt;code&gt;kwargs&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;はoptional&lt;/li&gt;
&lt;li&gt;route: URLパターンを含む文字列。&lt;code&gt;urlpatterns&lt;/code&gt;のパターンから始まる。リストを順に下から参照し、URLと一致するものを探す。&lt;/li&gt;
&lt;li&gt;view: マッチする正規表現を見つけると&lt;code&gt;view&lt;/code&gt;関数が呼び出される。&lt;br&gt;
その際は、&lt;code&gt;HttpRequest&lt;/code&gt;オブジェクトを第一引数。&lt;br&gt;
キーワード引数として、&lt;code&gt;route&lt;/code&gt;からキャプチャされた値を渡す。&lt;/li&gt;
&lt;li&gt;kwargs: 任意のキーワード引数を辞書としてビューにわたす。&lt;/li&gt;
&lt;li&gt;name: urlに名前をつけておくと、Djangoのどこからでも参照できるらしい。便利そう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;疑問&#34;&gt;疑問&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;URLConf
&lt;ul&gt;
&lt;li&gt;URL configの略っぽい。URLconf内の定数などを参照するということか？どこで定義されるのか？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ディスパッチャ
&lt;ul&gt;
&lt;li&gt;プログラム内で、特定の処理を実行するために、適切なコードや関数を呼び出すものらしい&lt;/li&gt;
&lt;li&gt;「急いで送る」という意味らしい。&lt;a href=&#34;https://p-cs.work/interrupt/&#34;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;イベントハンドラと何が違うのか？気になったので調べた
&lt;ul&gt;
&lt;li&gt;イベントハンドラーにイベントを転送するのがディスパッチャ&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参照&#34;&gt;参照&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://p-cs.work/interrupt/&#34;&gt;https://p-cs.work/interrupt/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Ed25519とは</title>
      <link>https://kjr020.github.io/posts/ed25519%E3%81%A8%E3%81%AF/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/ed25519%E3%81%A8%E3%81%AF/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;Giteaサーバーに登録しようと思い、sshの暗号キーペアを生成していた。
暗号化方式で、それまではrsaを選択していたが、ed25519という方式が良いという記事を見かけたので、それを選択した。
Ed25519の利点とRSAとの違いについて調べた。&lt;/p&gt;
&lt;h2 id=&#34;ed25519とは&#34;&gt;Ed25519とは&lt;/h2&gt;
&lt;p&gt;Ed25519は、楕円曲線暗号の一種である。
楕円曲線暗号は、楕円曲線上の点の演算を基にした暗号方式であり、RSA暗号と比べて同じレベルのセキュリティを持つ場合に、より短い鍵長で済むという特徴があるらしい。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.asahi.co.jp/posts/20231005-bbf6&#34;&gt;https://tech.asahi.co.jp/posts/20231005-bbf6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/takegons/items/706dc2d3d883d4a289bd&#34;&gt;https://qiita.com/takegons/items/706dc2d3d883d4a289bd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>git merge strategyとは</title>
      <link>https://kjr020.github.io/posts/git_merge_strategy/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/git_merge_strategy/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;Git を使っていて、 &amp;lsquo;ort&amp;rsquo; strategyについて気になった。
それまであまり気にしていなかったが、調べてみた&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git merge lesson38
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Merge made by the &lt;span class=&#34;s1&#34;&gt;&amp;#39;ort&amp;#39;&lt;/span&gt; strategy.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; src/index.js &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; ++++++++++++++++++-----
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; file changed, &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; insertions&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;+&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; deletions&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;merge-strategyとは&#34;&gt;Merge Strategyとは？&lt;/h2&gt;
&lt;p&gt;マージ実行時のバックグラウンドのメカニズムらしい。&lt;br&gt;
マージ(git pull or git merge)を実行した時に、バックエンドで動くマージ処理の種類らしいが選べるということ。&lt;/p&gt;
&lt;p&gt;optionで指定もできるが、自動的に選択されるもので、
&amp;lsquo;ort&amp;rsquo; strategyがデフォルトになっている。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/docs/merge-strategies&#34;&gt;https://git-scm.com/docs/merge-strategies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/ja/git/tutorials/using-branches/merge-strategy&#34;&gt;https://www.atlassian.com/ja/git/tutorials/using-branches/merge-strategy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>git_stash</title>
      <link>https://kjr020.github.io/posts/git_stash/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/git_stash/</guid>
      <description>&lt;h2 id=&#34;経緯s&#34;&gt;経緯S&lt;/h2&gt;
&lt;p&gt;コマンドラインから&lt;code&gt;git stash&lt;/code&gt;しようとして&lt;br&gt;
使い方を忘れてしまった。ちゃんと覚えていなかった。
調べてみた&lt;/p&gt;
&lt;h2 id=&#34;git-stash-とは&#34;&gt;git stash とは&lt;/h2&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;git stash して退避した変更を再び反映する場合には、２種類の方法がある&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git stash apply  // stashリストから削除せず適用
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git stash pop //  変更を適用して,stashリストから削除して
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>gitでcommit userを変更する</title>
      <link>https://kjr020.github.io/posts/git_fix_commit_user/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/git_fix_commit_user/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;gitを使用していたとき、
「リモートリポジトリにpush済みのコミットの、ユーザー情報を修正したい」
ということがあった。
修正する方法を調べてみた&lt;/p&gt;
&lt;h2 id=&#34;コード&#34;&gt;コード&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git filter-branch --env-filter &lt;span class=&#34;s1&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;OLD_EMAIL=[古いメールアドレス]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;CORRECT_NAME= [新しい名前]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;CORRECT_EMAIL= [新しいメールアドレス]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;if [ &amp;#34;$GIT_COMMITTER_EMAIL&amp;#34; = &amp;#34;$OLD_EMAIL&amp;#34; ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    export GIT_COMMITTER_NAME=&amp;#34;$CORRECT_NAME&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    export GIT_COMMITTER_EMAIL=&amp;#34;$CORRECT_EMAIL&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;fi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;if [ &amp;#34;$GIT_AUTHOR_EMAIL&amp;#34; = &amp;#34;$OLD_EMAIL&amp;#34; ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;then
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    export GIT_AUTHOR_NAME=&amp;#34;$CORRECT_NAME&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    export GIT_AUTHOR_EMAIL=&amp;#34;$CORRECT_EMAIL&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;fi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; --tag-name-filter cat -- --branches --tags
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>PromiseAll</title>
      <link>https://kjr020.github.io/posts/promiseall/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/promiseall/</guid>
      <description>&lt;p&gt;Promise.allについて調べたときのメモ&lt;/p&gt;
&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;なぜか忘れたけど、Promise.allについて調べていた。
記事にまとめておく。&lt;/p&gt;
&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Promise.all()&lt;/code&gt;は、JavaScriptの組み込みの静的メソッドである。
iterableなPromiseを入力として受取る。
それらのPromiseが全てresolveされた際に、新しいPromiseを返す。&lt;/p&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;mdnのデモを引用すると、以下のような構文となる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;promise1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;promise2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;promise3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;promise1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;promise2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;promise3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Expected output: Array [3, 42, &amp;#34;foo&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Reactのstate管理</title>
      <link>https://kjr020.github.io/posts/react%E3%81%AEstate%E7%AE%A1%E7%90%86/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/react%E3%81%AEstate%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;転職が決まりWEBエンジニアとして働くことになった。
転職先では、フロントエンド・バックエンドと別れずに開発を行うらしい。Reactについて学習を始めた。
Reactを学習していて、stateの管理について学んだことをまとめる。&lt;/p&gt;
&lt;h2 id=&#34;stateとは&#34;&gt;stateとは&lt;/h2&gt;
&lt;p&gt;Reactのコンポーネントには、stateという概念がある。
stateは、コンポーネント内で変更される値を管理するためのものである。
stateが変更されると、Reactは自動的に再レンダリングを行う。&lt;/p&gt;
&lt;p&gt;Reactでは、このstateの値を変更するために、&lt;code&gt;setState&lt;/code&gt;メソッドを使用する。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;setCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;useState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のように、&lt;code&gt;useState&lt;/code&gt;フックを使用してstateを宣言し、&lt;code&gt;setCount&lt;/code&gt;関数を使用してstateの値を変更する。
stateは、基本的にconstで宣言され、変更するためには&lt;code&gt;setCount&lt;/code&gt;関数を使用する。&lt;/p&gt;
&lt;p&gt;また、ReactではAtomic　Designの考え方が取り入れられており、コンポーネントは小さなコンポーネントに分割されることが推奨されている。
そのため、コンポーネント間でstateを共有するためには、親コンポーネントから子コンポーネントにpropsを渡すことが一般的である。
しかし、コンポーネントが多くなると、propsの受け渡しによるstateの管理が複雑になるため、stateの管理が難しくなる。
そのため、stateの値をグローバルに管理するための仕組みが存在する
Context APIやReduxなどがあるらしい。&lt;/p&gt;
&lt;h2 id=&#34;context-api&#34;&gt;Context API&lt;/h2&gt;
&lt;p&gt;Context APIは、Reactの公式で提供されているstateのグローバル管理ライブラリである。
Context APIを使用することで、コンポーネント間でstateを共有することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQLServerの認証方式</title>
      <link>https://kjr020.github.io/posts/sqlserver%E3%81%AE%E8%AA%8D%E8%A8%BC%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/sqlserver%E3%81%AE%E8%AA%8D%E8%A8%BC%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;デプロイ先サーバーの認証情報に関して、聞き取りをした。
その際に、SQL Serverの認証方式について、どの認証方式なのか？曖昧なまま話していた。
そもそも、認証方式として何種類くらいあるのかも、よくわかってない。
SQL Serverの認証情報を調べてみた。&lt;/p&gt;
&lt;h2 id=&#34;sql-serverの認証方式の種類&#34;&gt;SQL Serverの認証方式の種類&lt;/h2&gt;
&lt;p&gt;大きく  &lt;code&gt;Windows認証&lt;/code&gt; と &lt;code&gt;SQL Server認証&lt;/code&gt; という2つの認証方式がある。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL Server認証 (SQL Server Authentication)
&lt;ul&gt;
&lt;li&gt;SQL Serverのユーザー名とパスワードを使用して認証する方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Windows統合認証
&lt;ul&gt;
&lt;li&gt;Windows資格情報を使用する&lt;/li&gt;
&lt;li&gt;Active Directory ユーザーアカウントを使用して認証も可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learn.microsoft.com/ja-jp/sql/relational-databases/security/choose-an-authentication-mode?view=sql-server-ver16&#34;&gt;https://learn.microsoft.com/ja-jp/sql/relational-databases/security/choose-an-authentication-mode?view=sql-server-ver16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kwbtblog.com/entry/2019/10/11/030233&#34;&gt;https://www.kwbtblog.com/entry/2019/10/11/030233&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/kazumatsukazu/items/d754457712963c447a50&#34;&gt;https://qiita.com/kazumatsukazu/items/d754457712963c447a50&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>VIFとは</title>
      <link>https://kjr020.github.io/posts/vif%E3%81%A8%E3%81%AF/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/vif%E3%81%A8%E3%81%AF/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;製造業におけるデータ分析関連のカンファレンスで発表を聞いていた。&lt;br&gt;
VIFってなんだっけ？と思った。&lt;br&gt;
多重共線性を評価する文脈で使われていたが、
具体的な計算方法が思い出せなかったので、まとめる&lt;/p&gt;
&lt;h2 id=&#34;vifについて調べた&#34;&gt;VIFについて調べた&lt;/h2&gt;
&lt;p&gt;Variance Inflation Factorの略。
最小二乗回帰において、多重共線性の影響を定量化する指標。&lt;br&gt;
具体的には、どうやって定量化しているか？
推定された回帰係数の分散(推定値の標準偏差)がどれだけ多重共線性の影響で増大したかを図る&lt;br&gt;
説明変数ごとに、評価する値になる&lt;/p&gt;
&lt;p&gt;$$VIF_i = frac{1}{1-R_i^2}$$&lt;/p&gt;
&lt;p&gt;一般的には１０以下が多重共線性がないと、判断する目安らしいが根拠は不明。&lt;/p&gt;
&lt;h2 id=&#34;相関係数との違い多重共線性を評価するのにvifを用いる理由&#34;&gt;相関係数との違い、多重共線性を評価するのにVIFを用いる理由&lt;/h2&gt;
&lt;p&gt;相関係数は２変数だけの相関を見ていないため、多重共線性を評価するには不十分。&lt;br&gt;
VIFでは、すべての変数を計算に用いるため、全変数間の相関を考慮できる。ということらしい。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;どうやら多重共線性を判定する際には、相関係数では不適切であり、代わりに分散拡大要因(Variance Inflation Factor: VIF)を用いて判定することが推奨されているそうです。ではなぜ相関係数では不適切なのでしょうか。
それは、相関係数が2変数間の関係だけしか見ていないからです。
多変量解析の分析なら、多変量の相関で考えるべきなので、2変数間の関係しかみれない相関係数だと、不十分なのです。
それに対してVIFは全ての変数を使って計算していますので、多変数間の相関も考慮してくれます。&lt;/p&gt;
&lt;p&gt;また、正確に基準が定まっているわけではないようですが、VIFの値が
を超えると多重共線性を認めていると言えるそうです。
ただVIFが10というのも、かなり甘めの基準であるようです。
本来多変量解析は説明変数（独立変数）同士が全く相関していない状態であることが望ましいようです。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%88%86%E6%95%A3%E6%8B%A1%E5%A4%A7%E4%BF%82%E6%95%B0&#34;&gt;https://ja.wikipedia.org/wiki/分散拡大係数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/Ogin0pan/items/4105c0c39869d31f4a75&#34;&gt;https://qiita.com/Ogin0pan/items/4105c0c39869d31f4a75&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Vimのジャンプ</title>
      <link>https://kjr020.github.io/posts/vim_jump/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/vim_jump/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;毎回ジャンプして戻るためのコマンドを覚えられない。
&lt;code&gt;ctrl + o&lt;/code&gt;や&lt;code&gt;ctrl + i&lt;/code&gt;というキーバインドが操作に紐づくイメージがなかったため、詳しく調べて、定着させようと思った。&lt;/p&gt;
&lt;h2 id=&#34;コマンド&#34;&gt;コマンド&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ctrl + o&lt;/code&gt;: ジャンプ前の位置に戻る&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrl + i&lt;/code&gt;: 取り消したジャンプ操作を再実行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの覚え方を、ChatGPTに考えてもらったところ
o は &amp;ldquo;Older Position&amp;rdquo;
i は &amp;ldquo;Incoming Position&amp;rdquo;
と覚えると良いと教えてくれた。
なるほど、これなら覚えられそうだ。&lt;/p&gt;
&lt;h2 id=&#34;ジャンプリスト&#34;&gt;ジャンプリスト&lt;/h2&gt;
&lt;p&gt;GitHub Copilot chatに聞いてみたら、
&lt;code&gt;ctrl + o&lt;/code&gt;や&lt;code&gt;ctrl + i&lt;/code&gt;はジャンプリストを参照しているという補足情報をもらった。&lt;/p&gt;
&lt;p&gt;ジャンプリストなるものが存在すると知った&lt;br&gt;
&lt;code&gt;:jumps&lt;/code&gt;コマンドから確認できる。&lt;/p&gt;
&lt;h2 id=&#34;チェンジリストジャンプ&#34;&gt;チェンジリストジャンプ&lt;/h2&gt;
&lt;p&gt;ジャンプリストのうち、ジャンプ後に変更があったものは、チェンジジャンプリストに記録されるらしい。&lt;br&gt;
これは便利な機能だと思った。&lt;br&gt;
&lt;code&gt;:changes&lt;/code&gt;で表示ができる。&lt;br&gt;
&lt;code&gt;g;&lt;/code&gt;で戻る。&lt;code&gt;g,&lt;/code&gt;でやり直し。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://vim-jp.org/vimdoc-ja/motion.html#jump-motions&#34;&gt;https://vim-jp.org/vimdoc-ja/motion.html#jump-motions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://baubaubau.hatenablog.com/entry/2020/09/19/203537&#34;&gt;https://baubaubau.hatenablog.com/entry/2020/09/19/203537&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>VSCodeでファイルエクスプローラのアイコンが消えたときの対処法</title>
      <link>https://kjr020.github.io/posts/vscode%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%97%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%8C%E6%B6%88%E3%81%88%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/vscode%E3%81%A7%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%97%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%8C%E6%B6%88%E3%81%88%E3%81%9F%E3%81%A8%E3%81%8D%E3%81%AE%E5%AF%BE%E5%87%A6%E6%B3%95/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;VSCodeを使用していた。
サイドバーのメニューでファイルエクスプローラーをドラッグしたら、アイコンが消えた。&lt;br&gt;
以前にも戻し方が分からず調べた事があったが、忘れてしまった。
2度ある事は3度あるかもしれないので、まとめておく。&lt;/p&gt;
&lt;h2 id=&#34;対処法&#34;&gt;対処法&lt;/h2&gt;
&lt;p&gt;コマンドパレットからリセットすれば、初期状態に戻せる。&lt;/p&gt;
&lt;p&gt;&amp;lsquo;&amp;gt;View: Reset View Locations&amp;rsquo;&lt;/p&gt;
&lt;p&gt;もっと良い方法があったら、調べて追記したい。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.webdesignleaves.com/wp/htmlcss/2294/#google_vignette&#34;&gt;https://www.webdesignleaves.com/wp/htmlcss/2294/#google_vignette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>VSCodeのtaskについて調べた</title>
      <link>https://kjr020.github.io/posts/vscode_tasks/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/vscode_tasks/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;VSCode上でTypeScriptのデバッグをしたいと思って調べた。
やり方として、launch.json上で、TypeScriptのコンパイルするtaskを定義して、&lt;br&gt;
デバッグ前に呼び出し実行させる必要があるという事を学んだ。&lt;br&gt;
taskについてよく知らなかったため調べてみた。&lt;/p&gt;
&lt;h2 id=&#34;taskとは&#34;&gt;Taskとは？&lt;/h2&gt;
&lt;p&gt;VSCodeには、コマンドライン上の一連の作業をコードとして定義し、呼出せるTask機能があるらしい。&lt;br&gt;
今のところ理解した情報は以下の通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tasks.json&lt;/code&gt;上で定義できる&lt;/li&gt;
&lt;li&gt;デバッグ前に呼び出して実行できる(&lt;code&gt;launch.json&lt;/code&gt;に&amp;quot;preLaunchTask&amp;quot;として設定する)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;印象としては、GitHub ActionsやPower Automateと似ていると思った。&lt;br&gt;
細かい記法など調べながらであれば、なんとか使えそう。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/editor/tasks&#34;&gt;公式ドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kenpos.dev/2022-09-21-vscode%E3%81%AEtasks%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%82%88%E3%81%86/&#34;&gt;2022-09-21-VSCodeのTasks機能を使ってまとめてコマンドを実行しよう - 心のデブを信じろ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.classmethod.jp/articles/tasks-json-vscode-automation/&#34;&gt;【VS Code】tasks.jsonで決まった作業を自動化する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>WinSWとは</title>
      <link>https://kjr020.github.io/posts/winsw/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/winsw/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;Windows Server上で実行するDjangoとnginxのプロセスをサービスとして登録したいと考えた。&lt;br&gt;
当初、NSSMを使用することを検討したが、セキュリティツールで弾かれた。&lt;br&gt;
開発も止まっている様子なので、WinSWを使うことにした。&lt;/p&gt;
&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;Windows Service Wrapperの略らしい。&lt;br&gt;
Windows上でサービスとしてプロセスを登録するためのツール。&lt;/p&gt;
&lt;p&gt;サービスとして登録するための設定ファイル(xml形式)を作成し、&lt;code&gt;install&lt;/code&gt;コマンドを実行することで、サービスとして登録できる。
使い勝手としては、手頃で良さそう。
いつかまとめる&amp;hellip;かも&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/winsw/winsw&#34;&gt;https://github.com/winsw/winsw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kiririmode.hatenablog.jp/entry/20170407/1491490800&#34;&gt;https://kiririmode.hatenablog.jp/entry/20170407/1491490800&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/moni-hide/items/fd26fb223f2d4736cf55&#34;&gt;https://qiita.com/moni-hide/items/fd26fb223f2d4736cf55&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rinsymbol.net/entry/2022/03/13/191249&#34;&gt;https://www.rinsymbol.net/entry/2022/03/13/191249&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>ソケットについて</title>
      <link>https://kjr020.github.io/posts/%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/%E3%82%BD%E3%82%B1%E3%83%83%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/</guid>
      <description>&lt;h2 id=&#34;経緯&#34;&gt;経緯&lt;/h2&gt;
&lt;p&gt;「DockerのCLIがうまくdocker engineと接続できない」という事があったため、Dockerについて調べた。&lt;br&gt;
HTTPで通信しているという事をfukabori.FMで聞いた事があったので、解決に向けて調査を進めた。&lt;br&gt;
その最中、コンテナ間のHTTP通信は、UNIXソケットを介して実行されていることを知った。&lt;br&gt;
UNIXソケットは、ネットワークを介さずにプロセス間通信を行うための仕組みらしい。&lt;br&gt;
ネットワークスタックを通過することなく、高速でセキュアな通信が可能とのこと。&lt;/p&gt;
&lt;p&gt;UNIXソケット以外のソケットについても調べてみた。&lt;/p&gt;
&lt;h2 id=&#34;ソケット&#34;&gt;ソケット&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCPソケット&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ネットワークを通じての信頼性の高い、順序正しいデータ伝送が可能&lt;/li&gt;
&lt;li&gt;コネクション指向のプロトコルで、データが正確に、確実に届くことを保証する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UDPソケット&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ネットワークを通じての高速だが信頼性の低いデータ伝送&lt;/li&gt;
&lt;li&gt;コネクションレスプロトコルで、オーバーヘッドが少なく高速。データの順序や完全性は保証されない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rawソケット&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低レベルのネットワークプロトコルアクセス。カスタムプロトコルの実装やネットワークトラフィックの監視に使用&lt;/li&gt;
&lt;li&gt;ヘッダを含めたパケットを直接読み書きする能力を持ち、通常のデータ転送よりもさらに詳細な制御が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bluetoothソケット&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bluetoothデバイス間の通信&lt;/li&gt;
&lt;li&gt;低エネルギーネットワークでの短距離無線通信に適している&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>無線キーボードが遅延する仕組み</title>
      <link>https://kjr020.github.io/posts/%E7%84%A1%E7%B7%9A%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%8C%E9%81%85%E5%BB%B6%E3%81%99%E3%82%8B%E4%BB%95%E7%B5%84%E3%81%BF/</link>
      <pubDate>Sun, 25 Aug 2024 17:03:17 +0900</pubDate>
      <guid>https://kjr020.github.io/posts/%E7%84%A1%E7%B7%9A%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%8C%E9%81%85%E5%BB%B6%E3%81%99%E3%82%8B%E4%BB%95%E7%B5%84%E3%81%BF/</guid>
      <description>&lt;h2 id=&#34;無線キーボードの遅延がなぜ起きるのか&#34;&gt;無線キーボードの遅延がなぜ起きるのか？&lt;/h2&gt;
&lt;p&gt;職場での雑談中に、Logicoolのワイヤレスキーボードが不調であるという話が出た。&lt;br&gt;
操作に遅延がある、または反応しないという問題があり、その原因を調べたところ、USB3.0の機器を使用している場合に2.4GHz帯の電波と干渉することがあることがわかった。&lt;/p&gt;
&lt;h2 id=&#34;疑問&#34;&gt;疑問&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;電波干渉が発生した際に、通信が途切れて操作が効かなくなるのは直感的に理解できる。しかし、なぜ遅延が生じるのか、そのメカニズムが気になる。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;無線通信のチャネル図が台形になっている理由は何か？以前から、チャネルが20MHzごとに区切られている理由に興味があった。恐らく、10MHzずつの間隔を設けた結果、1チャネルが10MHz幅になったと推測している。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;感想&#34;&gt;感想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;電波が干渉するとSNRが低下し、信号の読み取りが難しくなるということを知り、以下の内容との関連性が興味深いと感じた。統計学の勉強中に、中心極限定理がどのような場面で応用されるのかを調べていた際、測定回数を増やすことでSNRを向上させるという知識を得た。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://milestone-of-se.nesuke.com/nw-basic/wireless/wifi-summary/&#34;&gt;https://milestone-of-se.nesuke.com/nw-basic/wireless/wifi-summary/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.perkinelmer.co.jp/tabid/2312/Default.aspx&#34;&gt;https://www.perkinelmer.co.jp/tabid/2312/Default.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
